---
name: alls-green
description: >-
  GitHub Action for checking that the test matrix jobs are all
  successful before proceeding. To be used in branch protection
author: >-
  Sviatoslav Sydorenko <wk+~github.com/re-actors/alls-green@sydorenko.org.ua>

branding:
  icon: check-circle
  color: green

inputs:
  jobs:
    description: A list of jobs from the `needs` context
    required: true
  allowed-failures:
    default: >-
      []
    description: Job names that are allowed to fail and not affect the outcome
    required: false

outputs:
  failure:
    description: Whether this check decided that the job matrix failed.
    value: ${{ steps.outcome.outputs.failure }}
  result:
    description: Failure or success result of the job matrix.
    value: ${{ steps.outcome.outputs.result }}
  success:
    description: Whether this check decided that the job matrix succeeded.
    value: ${{ steps.outcome.outputs.success }}

runs:
  using: composite
  steps:
  - name: Decide whether the input jobs succeeded or failed
    id: outcome
    run: |
      import json
      import sys

      allowed_failures_raw_input = """${{ inputs.allowed-failures }}"""
      try:
          allowed_failures_input = json.loads(allowed_failures_raw_input)
      except json.decoder.JSONDecodeError:
          allowed_failures_input = list(
              map(str.strip, allowed_failures_raw_input.split(',')),
          )

      inputs = {
          'allowed_failures': allowed_failures_input,
          'jobs': json.loads("""${{ inputs.jobs }}"""),
      }

      jobs = inputs['jobs'] or {}
      jobs_allowed_to_fail = inputs['allowed_failures'] or []

      if not jobs:
          sys.exit(
              '‚ùå Invalid input jobs matrix, '
              'please provide a non-empty `needs` context',
          )

      job_matrix_succeeded = all(
          job['result'] == 'success' for name, job in jobs.items()
          if name not in jobs_allowed_to_fail
      )

      print(
          '::set-output name=failure::{failed}'.
          format(failed=not job_matrix_succeeded),
          file=sys.stderr,
      )
      print(
          '::set-output name=result::{result}'.
          format(result='success' if job_matrix_succeeded else 'failure'),
          file=sys.stderr,
      )
      print(
          '::set-output name=success::{succeeded}'.
          format(succeeded=job_matrix_succeeded),
          file=sys.stderr,
      )

      allowed_to_fail_jobs_succeeded = all(
          job['result'] == 'success' for name, job in jobs.items()
          if name in jobs_allowed_to_fail
      )

      if job_matrix_succeeded:
          print('üéâ All of the required dependency jobs.', file=sys.stderr)
      else:
          print(
              'üò¢ Some of the required to succeed jobs failed.',
              file=sys.stderr,
          )

      if jobs_allowed_to_fail and allowed_to_fail_jobs_succeeded:
          print(
              'üõà All of the allowed to fail dependency jobs succeeded.',
              file=sys.stderr,
          )
      elif jobs_allowed_to_fail:
          print(
              'üõà Some of the allowed to fail jobs did not succeed.',
              file=sys.stderr,
          )

      print('üìù Job statuses:', file=sys.stderr)
      for name, job in jobs.items():
          print(
              'üìù {name} ‚Üí {emoji} {result} [{status}]'.
              format(
                  emoji='‚úì' if job['result'] == 'success' else '‚ùå',
                  name=name,
                  result=job['result'],
                  status='allowed to fail' if name in jobs_allowed_to_fail
                  else 'required to succeed',
              ),
              file=sys.stderr,
          )

      sys.exit(int(not job_matrix_succeeded))
    shell: python
...
